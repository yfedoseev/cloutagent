version: '3.8'

services:
  # Application service
  app:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"
      - "8000:8000"  # For Python apps
    volumes:
      - .:/app
      - /app/node_modules  # Prevent overwriting node_modules
      - /app/.venv         # Prevent overwriting Python venv
    environment:
      - NODE_ENV=development
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
    command: npm run dev

  # Database service (PostgreSQL)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-myapp}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Redis service (for caching/sessions)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Database GUI (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - db
    profiles:
      - tools

  # Redis GUI (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: myapp-network