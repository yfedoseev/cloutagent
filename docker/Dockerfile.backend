# Build stage
FROM node:22-alpine AS builder

WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm@8.14.0

# Copy package files for better layer caching
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY packages/types/package.json ./packages/types/
COPY apps/backend/package.json ./apps/backend/

# Install dependencies with frozen lockfile
RUN pnpm install --frozen-lockfile

# Copy source code
COPY packages/types ./packages/types
COPY apps/backend ./apps/backend
COPY tsconfig.json ./

# Build backend
WORKDIR /app/apps/backend
RUN pnpm build

# Production stage
FROM node:22-alpine

WORKDIR /app

# Install pnpm and wget for health checks
RUN apk add --no-cache wget && \
    npm install -g pnpm@8.14.0

# Copy package files
COPY --from=builder /app/package.json /app/pnpm-workspace.yaml /app/pnpm-lock.yaml ./
COPY --from=builder /app/apps/backend/package.json ./apps/backend/
COPY --from=builder /app/packages/types/package.json ./packages/types/

# Install production dependencies only
RUN pnpm install --prod --frozen-lockfile

# Copy built files
COPY --from=builder /app/apps/backend/dist ./apps/backend/dist

# Copy types package source (no build step needed, uses TS source directly)
COPY --from=builder /app/packages/types/src ./packages/types/src

# Create directories for data persistence
RUN mkdir -p /app/projects /app/backups /app/costs

# Add non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:3001/api/health || exit 1

WORKDIR /app/apps/backend
CMD ["node", "dist/index.js"]
